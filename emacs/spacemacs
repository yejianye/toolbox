;; -*- mode: dotspacemacs -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration."
  (setq-default
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (ie. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '((go :variables
         go-tab-width 4
         go-use-golangci-lint t
         go-backend 'lsp)
     octave
     csv
     ruby
     sql
     (clojure :variables
              clojure-enable-linters 'clj-kondo
              clojure-backend 'lsp)
     (auto-completion
      ;; :disabled-for go
      :variables
                      auto-completion-enable-snippets-in-popup nil
                      auto-completion-private-snippets-directory "~/toolbox/emacs/snippets")
     markdown
     (python :variables
             python-test-runner 'pytest
             python-backend 'lsp
             python-lsp-server 'mspyls)
     emacs-lisp
     parinfer
     javascript
     java
     html
     yaml
     org
     (syntax-checking :variables
                      syntax-checking-enable-by-default nil)
     (spell-checking :variables
                     spell-checking-enable-by-default nil)
     git
     better-defaults
     restclient
     imenu-list
     helpful
     (chinese :variables
              chinese-enable-fcitx t
              chinese-enable-youdao-dict t)
     lsp)
     ;; ipython-notebook
     ;; Disable ansible for breaking describe key
     ;; https://github.com/syl20bnr/spacemacs/issues/8027
     ;; ansible
     ;; treemacs
     ;; react
     ;; itome-react
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages
   '(
     importmagic
     org-brain
     company-tern
     ;; lsp-python-ms
     gitattributes-mode
     gitconfig-mode
     gitignore-mode
     helm-gitignore)
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'
   dotspacemacs-delete-orphan-packages t
   dotspacemacs-additional-packages
   '(
     jade-mode
     vue-mode
     sr-speedbar
     writeroom-mode
     yafolding
     names
     org-ql
     helm-org-ql)
     ;; outshine
     ;; cnfonts
     ;; Replaced with using Apple Script to get page title
     ;; org-cliplink
   dotspacemacs-scratch-buffer-persistent t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; Either `vim' or `emacs'. Evil is always enabled but if the variable
   ;; is `emacs' then the `holy-mode' is enabled at startup.
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progess in `*Messages*' buffer.
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to a .PNG file.
   ;; If the value is nil then no banner is displayed.
   ;; dotspacemacs-startup-banner 'official
   dotspacemacs-startup-banner nil
   ;; t if you always want to see the changelog at startup
   dotspacemacs-always-show-changelog nil
   ;; List of items to show in the startup buffer. If nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects'.
   dotspacemacs-startup-lists '((recents . 5) (projects . 7))
   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 14
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   dotspacemacs-emacs-leader-key "s-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it.
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'
   dotspacemacs-major-mode-emacs-leader-key "s-,"
   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ":"
   ;; If non nil the paste micro-state is enabled. While enabled pressing `p`
   ;; several times cycle between the kill ring content.
   dotspacemacs-enable-paste-micro-state nil
   ;; Guide-key delay in seconds. The Guide-key is the popup buffer listing
   ;; the commands bound to the current keystrokes.
   dotspacemacs-guide-key-delay 0.4
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil ;; to boost the loading time.
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up.
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX.
   dotspacemacs-fullscreen-use-non-native t
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-inactive-transparency 90
   ;; If non nil unicode symbols are displayed in the mode line.
   dotspacemacs-mode-line-unicode-symbols t
   dotspacemacs-mode-line-theme 'spacemacs
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen.
   dotspacemacs-smooth-scrolling t
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   dotspacemacs-smartparens-strict-mode nil
   ;; If non nil advises quit functions to keep server open when quitting.
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now.
   dotspacemacs-default-package-repository nil
   dotspacemacs-distinguish-gui-tab t
   dotspacemacs-large-file-size 100
   dotspacemacs-auto-resume-layouts nil
   dotspacemacs-check-for-update nil)
  ;; User initialization goes here
  ;; List of themes, the first of the list is loaded when spacemacs starts.
  ;; Press <SPC> T n to cycle to the next theme in the list (works great
  ;; with 2 themes variants, one dark and one light)
  (setq dotspacemacs-themes '(solarized-light
                              solarized-dark)))
  ;; Other choices
  ;; (setq dotspacemacs-themes '(solarized-gruvbox-light
  ;;                             solarized-gruvbox-dark))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init', before layer configuration
executes.
 This function is mostly useful for variables that need to be set
before packages are loaded. If you are unsure, you should try in setting them in
`dotspacemacs/user-config' first."

  ;; Set the Emacs customization file path. Must be done here in user-init.
  ;; (setq configuration-layer-elpa-archives
  ;;     '(("gnu" . "https://elpa.gnu.org/packages/")
  ;;       ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

  ;; Add China mirror for ELPA
  ;; (setq configuration-layer-elpa-archives
  ;;     '(("melpa-cn" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
  ;;       ("org-cn"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/")
  ;;       ("gnu-cn"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")))
  ;; turn off "Package cl deprecated" warning
  (setq byte-compile-warnings '(cl-functions))
  ;;
  (setq native-comp-async-report-warnings-errors 'silent)
  ;; Load custom file
  (setq custom-file "~/.emacs-custom.el"))

(defun dotspacemacs/user-config ()
  "Configuration function.
 This function is called at the very end of Spacemacs initialization after
layers configuration."
  (load "~/toolbox/emacs/funcs.el")
  (ry/global-settings)
  (ry/global-keybindings)
  (ry/file-shortcuts)
  (ry/lsp-mode-settings)
  (ry/org-mode-settings)
  (ry/python-mode-settings)
  (ry/clojure-mode-settings)
  (ry/sql-mode-settings)
  (ry/elisp-mode-settings)
  (ry/go-mode-settings)
  (ry/osx-settings)
  (ry/chinese-settings)

  ;; Custom filetypes
  ;; (add-to-list 'auto-mode-alist '("\\.js\\'" . react-mode))

  ;; Snippet mode
  (spacemacs|use-package-add-hook yasnippet
    :post-config
    (spacemacs/set-leader-keys-for-major-mode 'snippet-mode
      "," 'yas-load-snippet-buffer-and-close))

  ;; Artist mode
  (with-eval-after-load "artist"
    (define-key artist-mode-map [(down-mouse-3)] 'artist-mouse-choose-operation))

  ;; shell keybindings
  (with-eval-after-load "comint"
    (define-key comint-mode-map (kbd "C-u") 'backward-kill-sentence))

  ;; helm settings
  (setq helm-M-x-fuzzy-match t
        helm-recentf-fuzzy-match t)
  (with-eval-after-load "helm"
    (define-key helm-map (kbd "C-w") 'backward-kill-word)
    (define-key helm-map (kbd "C-,") 'helm-toggle-visible-mark)
    (setq helm-source-projectile-projects-actions
          (helm-make-actions
           "Switch to project" (lambda (project)
                                 (let ((projectile-completion-system 'helm))
                                   (projectile-switch-project-by-name project)))
           "Open Dired in project's directory `C-d'" #'dired
           "Open project root in vc-dir or magit `M-g'" #'helm-projectile-vc
           "Switch to Eshell `M-e'" #'helm-projectile-switch-to-eshell
           "Grep in projects `C-s'" #'ry/projectile-switch-and-search
           "Compile project `M-c'. With C-u, new compile command" #'helm-projectile-compile-project
           "Remove project(s) from project list `M-D'" #'helm-projectile-remove-known-project)))
  (with-eval-after-load "helm-org"
    (defun helm-org-insert-link-to-heading-at-marker (marker)
      "Insert link to heading at MARKER position."
      (with-current-buffer (marker-buffer marker)
        (let ((heading-name (save-excursion
                              (save-restriction
                                (widen)
                                (goto-char (marker-position marker))
                                (nth 4 (org-heading-components)))))
              (file-name (buffer-file-name)))
          (with-helm-current-buffer
            (org-insert-link
             file-name (concat "file:" file-name "::*" heading-name) heading-name))))))

  ;; magit settings
  (setq magit-push-always-verify nil)

  ;; projectile settings
  ;; Originally the indexing method is set to 'turbo-alien, which seems having trouble handling projects in iCloud.
  ;; Thus, I changed it to 'alien mode
  (setq projectile-indexing-method 'alien)
  (setq projectile-enable-caching t)
  (setq enable-local-variables :all)
  (add-hook 'emacs-lisp-mode-hook 'ry/auto-reload-dir-locals-hook)

  ;; treemacs
  ;; (spacemacs|use-package-add-hook treemacs
  ;;   :post-config
  ;;   (add-to-list 'treemacs-ignored-file-predicates 'ry/treemacs-ignore-file-predicate)
  ;;   )

  ;; ediff
  (with-eval-after-load "ediff"
    (ediff-setup-keymap)
    (define-key ediff-mode-map " " nil))

  ;; markdown
  (setq markdown-open-command "~/utils/mark.sh")

  (add-hook 'markdown-mode-hook 'ry/setup-markdown-mode)

  ;; outline mode
  ;; (require 'outshine)
  ;; (add-hook 'outline-minor-mode-hook 'outshine-hook-function)

  ;; writeroom
  (setq writeroom-global-effects '(;; writeroom-set-fullscreen
                                   writeroom-set-alpha
                                   writeroom-set-menu-bar-lines
                                   writeroom-set-tool-bar-lines
                                   writeroom-set-vertical-scroll-bars
                                   writeroom-set-bottom-divider-width))
  (setq writeroom-extra-line-spacing 0.5)
  (setq writeroom-fullscreen-effect 'maximized)
  (setq writeroom-width 100)
  (setq writeroom-mode-line t)

  ;; natural title bar
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))

  ;; load custom-file if it exists
  (when (file-exists-p custom-file)
    (load-file custom-file))

  ;; Load local config
  (setq local-config-file "~/.emacs-local.el")
  (when (file-exists-p local-config-file)
    (load local-config-file)))


(defun ry/gui-config()
  (setq interprogram-cut-function nil)
  (setq interprogram-paste-function nil)
  (setq frame-title-format '(buffer-file-name "%f" ("%b"))))

(defun ry/terminal-config()
  (setq linum-format "%4d \u2502 "
        linum-relative-format "%3s \u2502 "))

(defun ry/global-settings ()
  ;; start server
  (server-start)

  ;; garbage collections
  (setq garbage-collection-messages t)

  ;; tags
  (setq tags-add-tables nil)
  (setq tags-revert-without-query t)

  ;; Chinese
  (spacemacs//set-monospaced-font   "Source Code Pro" "Hiragino Sans GB" 14 16)
  (setq pangu-spacing-real-insert-separtor t)

  ;; Enable auto-completion globally
  (global-company-mode)

  ;; Auto-saving
  (setq create-lockfiles nil)
  (setq auto-save-visited-file-name t)

  ;; Smooth Scrolling
  (pixel-scroll-mode)
  (setq pixel-dead-time 0) ; Never go back to the old scrolling behaviour.
  (setq pixel-resolution-fine-flag t) ; Scroll by number of pixels instead of lines (t = frame-char-height pixels).
  (setq fast-but-imprecise-scrolling t) ; No (less) lag while scrolling lots.
  (setq mouse-wheel-scroll-amount '(1)) ; Distance in pixel-resolution to scroll each mouse wheel event.
  (setq mouse-wheel-progressive-speed nil) ; Progressive speed is too fast for me.

  ;; Disable smartparens
  (spacemacs/toggle-smartparens-globally-off)
  (add-hook 'emacs-lisp-mode-hook (lambda () (smartparens-mode -1)))

  ;; Do not show line-continue symbol
  (fringe-mode '(1 . 1))
  ;; Treat underscore as part of the word
  (ry/add-hook-underscore-as-word '(prog-mode-hook yaml-mode-hook))

  (setq-default indent-tabs-mode nil
                tab-width 4)

  (setq vc-follow-symlinks t)

  (setq browse-url-generic-program "open")

  ;; Popwin
  ;; (push '("^\\*pytest-.*\\*$" :regexp t :noselect t)
  (push '("^\\*pytest-.*\\*$" :regexp t
          :dedicated t :position bottom :stick t :noselect t)
        popwin:special-display-config)

  ;; ry/pyfunc
  (setq ry/python-executable "/Users/ryan/.pyenv/shims/python")

  (if (display-graphic-p)
      (ry/gui-config)
    (ry/terminal-config)))

(defun ry/file-shortcuts ()
  (ry/set-key-for-file
   "fef" "~/toolbox/emacs/funcs.el"
   "ot" "~/org/thinking.org"
   "ow" "~/org/bytedance/weekly-report.org"
   "or" "~/org/bytedance/recruiting.org"
   "os" "~/org/bytedance/security.org"
   "om" "~/org/bytedance/regular-meetings.org"
   "op" "~/org/tasks.org"
   "o1" "~/org/bytedance/one-on-one/others.org"
   "od" "~/org/diary.org"
   "ob" "~/org/vault/bookmark-notes.org"
   "oo" "~/org/okrs.org"
   "oe" "~/org/topics/emacs.org"))

(defun ry/global-keybindings ()
  (spacemacs/set-leader-keys
    "py" 'helm-etags-select
    "rf" 'frameset-to-register
    "rj" 'jump-to-register
    "x=" 'align
    "ps" 'ry/rsync-project-to-remote
    "cs" 'ry/helm-code-snippets
    "E" 'eval-expression
    "yi" 'ry/insert-yas
    "yn" 'yas-new-snippet
    "ye" 'yas/visit-snippet-file
    "pn" 'ry/projectile-add-new-project
    "fy" 'ry/show-and-copy-buffer-filename
    "fY" 'ry/copy-filename-to-osx-clipboard
    "fl" 'ry/copy-org-protocol-to-osx-clipboard
    "gr" 'magit-reflog
    "gd" 'ry/git-diff
    "gD" 'ry/github-branch-diff
    "bp" 'ry/switch-to-prev-buffer-in-other-window
    "bl" 'ry/show-log-buffer
    "Tw" 'writeroom-mode
    "oy" 'youdao-dictionary-search-at-point-tooltip
    "oft" 'ry/test-function
    "ofT" 'ry/test-set-function)

  (spacemacs/set-leader-keys-for-minor-mode 'outline-minor-mode
    "<tab>" 'outshine-cycle-buffer
    "sn" 'org-narrow-to-subtree
    "sN" 'widen)

  ;; normal mode
  (define-key evil-normal-state-map "j" 'evil-next-visual-line)
  (define-key evil-normal-state-map "k" 'evil-previous-visual-line)
  (define-key evil-normal-state-map ";w" 'subword-forward)
  (define-key evil-normal-state-map ";b" 'subword-backward)
  (define-key evil-normal-state-map (kbd "C-j") (kbd "5j"))
  (define-key evil-normal-state-map (kbd "C-k") (kbd "5k"))
  (define-key evil-normal-state-map (kbd "s-p") 'lazy-helm/helm-recentf)

  ;; insert mode
  (define-key evil-insert-state-map (kbd "C-v") 'evil-paste-after)
  (define-key evil-insert-state-map (kbd "DEL") 'ry/backspace-whitespace-to-tab-stop)
  (define-key evil-insert-state-map (kbd "<s-left>") 'beginning-of-line)
  (define-key evil-insert-state-map (kbd "<s-right>") 'end-of-line)
  (define-key evil-insert-state-map (kbd "C-a") 'beginning-of-line)
  (define-key evil-insert-state-map (kbd "C-e") 'end-of-line)

  ;; all modes
  (global-set-key (kbd "C-h f") 'helpful-callable)
  (global-set-key (kbd "C-h v") 'helpful-variable)
  (global-set-key (kbd "C-h k") 'helpful-key)
  (global-set-key (kbd "C-s-h") 'ry/helm-org-entries)

  ;; helm
  (define-key helm-buffer-map (kbd "C-o") 'helm-buffer-switch-other-window)
  (define-key helm-find-files-map (kbd "C-o") 'helm-ff-run-switch-other-window)
  (define-key helm-generic-files-map (kbd "C-o") 'helm-ff-run-switch-other-window))
  ;; Binding keys to projectile key map doesn't work (dont't know why)
  ;; (define-key helm-projectile-find-file-map (kbd "C-o") 'helm-ff-run-switch-other-window))



(defun ry/org-mode-settings()
  (setq org-startup-folded 'fold)
  (setq org-startup-truncated nil)
  (setq org-export-with-sub-superscripts nil)
  (setq org-archive-file-header-format "#+STARTUP: overview\nArchived from [[file:%s]]\n")
  (setq ry-org-root-dir (file-truename "~/org/"))
  (setq ry-org-images-dir (concat ry-org-root-dir "images/"))
  (setq ry-org-journal-dir (concat ry-org-root-dir "journals/"))
  (setq ry-org-code-snippet-file (concat ry-org-root-dir "code-snippets.org"))

  (setq org-agenda-files '("~/org/tasks.org"))
  (setq org-columns-default-format "%60ITEM(Task) %6Effort(Estim){:}")

  (setq org-clock-idle-time 20)
  (setq org-log-into-drawer t)

  (setq org-file-apps
        '((auto-mode . emacs)
          ("\\.org_archive\\'" . emacs)
          ("\\.mm\\'" . default)
          ("\\.x?html?\\'" . default)
          ("\\.pdf\\'" . default)
          ("\\.pptx\\'" . "open %s")
          ("\\.xlsx\\'" . "open %s")))

  (spacemacs/set-leader-keys
    "oc" 'org-capture
    ;; "oa" 'ry/org-filter-todo-keyword
    "oa" 'org-agenda-list
    "oA" 'ry/org-agenda-column-view
    "oj" 'ry/org-goto-journal
    "oh" 'ry/helm-org-entries
    "oH" 'ry/helm-org-headings-in-org-directory
    "ol" 'ry/helm-org-search-links
    "o/" 'helm-org-rifle-org-directory
    "on" 'ry/org-new-today-todo)
    ;; "oT" 'ry/show-last-week-timesheet
    ;; "oi" 'ry/timesheet-add-entry
    ;; "ou" 'ry/timesheet-update-checkpoint)

  (spacemacs|use-package-add-hook evil-org
    :post-config
    (progn
      (spacemacs/set-leader-keys-for-major-mode 'org-mode
        "id" 'ry/insert-today-date
        "ie" 'ry/orgentry-index-entry
        "ii" 'ry/org-paste-image
        "is" 'ry/org-insert-sub-heading
        "iL" 'ry/org-cliplink-osx
        "if" 'ry/org-insert-file-link
        "in" 'ry/org-new-interview
        "io" 'ry/helm-org-insert-headings
        "im" 'ry/insert-meeting-notes-from-clipboard
        "bl" 'ry/org-find-backlinks
        ">" 'org-demote-subtree
        "<" 'org-promote-subtree
        "ss" 'org-show-subtree
        "yy" 'ry/org-copy-as-rtf
        "ym" 'ry/org-copy-as-markdown
        "l" 'org-open-at-point
        "k" 'org-previous-visible-heading
        "j" 'org-next-visible-heading
        "<tab>" 'ry/org-cycle
        "ic" 'ry/timesheet-calculate-total-time
        "St" 'ry/org-schedule-tomorrow
        "Sw" 'ry/org-schedule-next-week
        "yl" 'org-store-link
        "so" 'ry/org-hide-other-subtrees
        "oc" 'org-columns
        "o[" 'ry/find-checkbox-in-current-buffer
        "mt" 'ry/move-to-today-todo
        "mT" 'ry/copy-to-today-todo
        "ms" 'ry/move-to-someday-todo
        "mS" 'ry/copy-to-someday-todo
        "sa" 'ry/org-smart-archive
        "tiR" 'ry/orgtable-insert-row-after)
      (ry/declare-prefix-for-mode 'org-mode `(("mo" . "user bindings")))

      (evil-define-key 'normal org-mode-map
        "t" 'org-todo
        ",B" 'ry/org-toggle-bold-line)

      (evil-define-key 'insert org-mode-map
        ;; indent current line
        (kbd "<tab>")
        (make-cmd
         (cond
          ((org-at-item-p) (evil-org-> (line-beginning-position) (line-end-position)))
          (t (org-cycle))))
        ;; unindent current line
        (kbd "<S-tab>")
        (make-cmd
         (cond
          ((org-at-item-p) (evil-org-< (line-beginning-position) (line-end-position)))
          (t (org-cycle)))))

      (evil-define-key 'visual org-mode-map
        (kbd "s-b") 'ry/org-toggle-bold
        (kbd "s-i") 'ry/org-toggle-italic
        (kbd "s-s") 'ry/org-toggle-strikethrough
        (kbd "s-k") 'ry/org-add-link-on-region)

      (define-key org-mode-map (kbd "s-l") 'ry/org-insert-browser-url-osx)
      (define-key org-mode-map (kbd "s-C-i") 'ry/helm-org-insert-headings)
      (define-key org-mode-map (kbd "s-C-e") 'ry/helm-emoji)
      (define-key org-mode-map (kbd "s-e") 'org-insert-heading)
      (define-key org-mode-map (kbd "s-s") 'ry/org-insert-sub-heading)
      (define-key org-mode-map (kbd "s-<return>") 'org-meta-return)
      (evil-define-key nil org-mode-map
        (kbd "<s-left>") 'org-metaleft
        (kbd "<s-right>") 'org-metaright)

      (spacemacs/toggle-mode-line-org-clock-on)))

  (setq org-todo-keywords
        '((sequence "WIP(w)" "NEXT(n)" "SOON(s)" "SOMEDAY(o)" "WAITING(W)" "DELEGATE(e)"
                    "|" "DONE(d)" "CANCELLED(c)")))

  (ry/org-capture-templates)

  ;; org-protocol
  (setq org-protocol-project-alist
        '(("home directory"
           :base-url "http://home-dir/"
           :working-directory "/Users/ryan/")))

  ;; org-ql
  (setq org-ql-search-directories-files-recursive t)

  ;; org entry
  (setq org-id-link-to-org-use-id 'use-existing)
  (setq org-id-locations-file-relative 't)
  (setq org-id-locations-file (concat ry-org-root-dir ".org-id-locations"))
  (setq helm-org-entry-category-list '("project" "thinking" "meeting" "one-on-one" "default"))
  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'before-save-hook 'ry/orgentry-index-buffer nil t)
              (add-hook 'after-save-hook 'ry/orgentry-db-sync nil t)))

  (ry/org-mode-look-and-feel))

(defun ry/org-capture-templates ()
  (setq org-capture-templates
        '(
          ("p" "Problems" item (file+headline "~/org/tasks.org" "Problems to be solved")
           "- [ ] %u %?\n" :prepend t)
          ("i" "Ideas" item (file+headline "~/org/tasks.org" "Random Ideas")
           "- [ ] %u %?\n" :prepend t)
          ("m" "Meeting Topic" item (file+headline "~/org/bytedance/regular-meetings.org" "Topic Inbox")
           "- [ ] %u %?\n" :prepend t)
          ("a" "Article Notes" entry (file+headline "~/org/vault/bookmark-notes.org" "Articles") (function ry/org-capture-webpage-template) :prepend t))))

(defun ry/org-mode-look-and-feel ()
  ;; CHECKBOX
  (add-hook 'org-mode-hook
            (lambda ()
              (toggle-word-wrap 1)
              (org-indent-mode 1)
              (ry/reload-prettify-symbols)))

  ;; Strikethrough checkbox
  ;; https://jft.home.blog/2019/07/17/use-unicode-symbol-to-display-org-mode-checkboxes/
  (defface org-checkbox-done-text
    '((t (:foreground "#71696A" :strike-through t)))
    "Face for the text part of a checked org-mode checkbox.")

  (font-lock-add-keywords
   'org-mode
   `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)"
      1 'org-checkbox-done-text prepend))
   'append)

  (with-eval-after-load "solarized-light-theme"
    (custom-theme-set-faces
     'solarized-light
     ;; '(org-node-id-text ((t (:foreground "#fdf6e3"))))
     '(org-checkbox-done-text ((t (:foreground "#96A1A1" :strike-through t))))
     '(org-checkbox ((t (:background "#fdf6e3" :foreground "#657b83" :box nil))))
     '(sp-show-pair-match-face ((t (:background "Antiquewhite3" :inherit show-paren-match))))
     '(sp-show-pair-match-content-face ((t (:background "#eee8d5"))))))
  (with-eval-after-load "solarized-dark-theme"
    (custom-theme-set-faces
     'solarized-dark
     ;; '(org-node-id-text ((t (:foreground "#002b36"))))
     '(org-checkbox-done-text ((t (:foreground "#71696A" :strike-through t))))
     '(org-checkbox ((t (:background "#002b36" :foreground "#839496" :box nil))))))
  (spacemacs/load-default-theme)

  ;; BULLET LIST
  (setq org-superstar-item-bullet-alist
        '((?* . ?□)
          (?+ . ?○)
          (?- . ?•)))
  (setq org-list-demote-modify-bullet '(("-" . "+") ("+" . "*") ("*" . "-")))

  ;; OTHERS
  (setq org-hide-emphasis-markers t))

(defun ry/lsp-mode-settings ()
  ;; Got error if this value is set t
  (setq lsp-python-ms-parse-dot-env-enabled nil)
  (setq lsp-auto-guess-root t))

(defun ry/cider-eval-buffer ()
  "Same as cider-eval-buffer but save buffer first"
  (interactive)
  (save-buffer)
  (cider-eval-buffer))

(defun ry/clojure-mode-settings ()
  (spacemacs|use-package-add-hook cider
    :post-config
    (message "spacemacs|use-package-add-hook clojure/cider")
    (spacemacs/set-leader-keys-for-major-mode 'clojure-mode
      "ec" 'cider-eval-list-at-point
      "eb" 'ry/cider-eval-buffer
      "di" 'cider-inspect-last-result))

  (add-hook 'clojure-mode-hook
            (lambda ()
              (smartparens-mode -1)
              (lsp-ui-sideline-mode -1))
            100))

(defun ry/python-mode-settings ()
  (spacemacs|use-package-add-hook python
    :post-config
    (spacemacs/set-leader-keys-for-major-mode 'python-mode
      "'" 'ry/python-start-or-switch-repl))

  (setq flycheck-python-pylint-executable "pylint")
  (setq flycheck-python-flake8-executable "flake8")

  (add-hook 'python-mode-hook (lambda ()
                                (yafolding-mode 1)))
                                ;; (setq flycheck-checker 'python-flake8)
  ;; It should be '-i' to keep ipython in interactive mode
  ;; But ipython would fail to boot with '-i', and currently
  ;; I have no idea why it happens.
  ;; (setq python-shell-interpreter-args "-i --simple-prompt --profile=emacs")
  (setq python-shell-interpreter-args "-i")
  (setq python-shell-interpreter "python")
  (setq-default python-indent 4)
  ;; (with-eval-after-load "python"
  ;;   (modify-syntax-entry ?_ "w" python-mode-syntax-table)
  ;;   )
  (remove-hook 'python-mode-hook 'turn-on-evil-matchit-mode)

  ;; (message "bind leader key for python mode in my config")
  ;; (spacemacs/set-leader-keys-for-major-mode 'python-mode
  ;;   "'" 'ry/python-start-or-switch-repl)

  (with-eval-after-load "anaconda-mode"
    (define-key anaconda-mode-map [remap find-tag] nil))
  (setq ein:connect-default-notebook "8888/emacs-default.ipynb"))

(defun ry/sql-mode-settings ()
  (add-hook 'sql-mode-hook 'ry/sql-mode-hook)
  (spacemacs/set-leader-keys-for-major-mode 'sql-mode
    "c" 'ry/sql-connect-and-bind
    "lc" 'ry/sql-list-clear-cache
    "bk" 'ry/sql-kill-buffer
    "r" 'ry/sql-reconnect
    "sv" 'ry/sql-show-viz
    "o" 'outline-minor-mode)
  (setq sql-set-sqli-hook 'ry/sql-set-sqli-hook))

(defun ry/elisp-mode-settings ()
  (spacemacs/set-leader-keys-for-major-mode 'emacs-lisp-mode
    "ip" 'ry/insert-page-breaker
    "dt" 'trace-function
    "dT" 'untrace-function
    "rw" 'ry/delete-whitespace-lines)
  (spacemacs/set-leader-keys-for-major-mode 'edebug-eval-mode
    "u" 'edebug-update-eval-list
    "d" 'edebug-delete-eval-item)

  (with-eval-after-load "edebug"
    (define-key edebug-mode-map "A" 'ry/elisp-add-to-watch)
    (advice-add 'edebug-create-eval-buffer :override #'ry/edebug-create-eval-buffer))
  ;; Show fringe only in edebug mode because I'd like to see the line indicator icon during debug.
  ;; The code below is copied from https://emacs.stackexchange.com/questions/720/can-i-toggle-fringe-mode-when-entering-exiting-edebug
  (add-hook 'edebug-mode-hook
            (lambda ()
              (set-fringe-mode
               (set (make-local-variable 'fringe-mode)
                    (if edebug-mode '(nil . 0) 0))))))

(defun ry/go-mode-settings ()
  ;; (spacemacs|disable-company go-mode)
  (add-hook 'go-mode-hook (lambda ()
                            ;; (company-mode -1)
                            ;; (eldoc-mode -1)
                            (setq imenu-generic-expression
                                  '(("type" "^type *\\([^ \t\n\r\f]*\\)" 1)
                                    ("func" "^func *\\([^{\n\r]*\\)" 1))))))

(defun ry/osx-settings ()
  (setq select-enable-clipboard nil)
  (setq mac-command-modifier 'super)
  (setq mac-option-modifier 'meta)
  (global-set-key (kbd "s-v") 'ry/osx-paste)
  (define-key evil-normal-state-map (kbd "s-n") 'make-frame)
  (define-key evil-visual-state-map (kbd "s-c") 'ry/osx-copy)
  (global-set-key (kbd "s-=") 'ry-cnfonts/scale-up)
  (global-set-key (kbd "s--") 'ry-cnfonts/scale-down))
  ;; (global-set-key (kbd "s-=") 'spacemacs/scale-up-font)
  ;; (global-set-key (kbd "s--") 'spacemacs/scale-down-font)

(defun ry/chinese-settings ()
  ;; Original CN font settings
  ;; (dolist (charset '(kana han cjk-misc bopomofo))
  ;;   (set-fontset-font (frame-parameter nil 'font)
  ;;                     charset (font-spec :family "Hiragino Sans GB")))
  ;; (setq face-font-rescale-alist '(("Hiragino Sans GB" . 1.0)))

  (ry-cnfonts/setup)

  ;; Allow styling for Chinese characters without space
  ;; Run before (require 'org)
  ;; https://emacs-china.org/t/org-mode/597
  (setq org-emphasis-regexp-components
        (list (concat " \t('\"{"            "[:nonascii:]")
              (concat "- \t.,:!?;'\")}\\["  "[:nonascii:]")
              " \t\r\n,\"'"
              "."
              1)))
