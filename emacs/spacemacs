;; -*- mode: dotspacemacs -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration."
  (setq-default
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (ie. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(
     (auto-completion :variables
                      auto-completion-enable-snippets-in-popup nil
                      auto-completion-private-snippets-directory "~/toolbox/emacs/snippets"
                      :disabled-for org)
     markdown
     python
     emacs-lisp
     javascript
     ansible
     yaml
     org
     osx
     syntax-checking
     spell-checking
     git
     better-defaults
     eyebrowse
     )
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '()
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; Either `vim' or `emacs'. Evil is always enabled but if the variable
   ;; is `emacs' then the `holy-mode' is enabled at startup.
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progess in `*Messages*' buffer.
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to a .PNG file.
   ;; If the value is nil then no banner is displayed.
   ;; dotspacemacs-startup-banner 'official
   dotspacemacs-startup-banner nil
   ;; t if you always want to see the changelog at startup
   dotspacemacs-always-show-changelog nil
   ;; List of items to show in the startup buffer. If nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects'."
   dotspacemacs-startup-lists '(recents projects)
   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 13
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it.
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ":"
   ;; If non nil the paste micro-state is enabled. While enabled pressing `p`
   ;; several times cycle between the kill ring content.
   dotspacemacs-enable-paste-micro-state nil
   ;; Guide-key delay in seconds. The Guide-key is the popup buffer listing
   ;; the commands bound to the current keystrokes.
   dotspacemacs-guide-key-delay 0.4
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil ;; to boost the loading time.
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up.
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX."
   dotspacemacs-fullscreen-use-non-native 1
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup t
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-inactive-transparency 90
   ;; If non nil unicode symbols are displayed in the mode line.
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen.
   dotspacemacs-smooth-scrolling t
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   dotspacemacs-smartparens-strict-mode t
   ;; If non nil advises quit functions to keep server open when quitting.
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now.
   dotspacemacs-default-package-repository nil
   )
  ;; User initialization goes here
  ;; List of themes, the first of the list is loaded when spacemacs starts.
  ;; Press <SPC> T n to cycle to the next theme in the list (works great
  ;; with 2 themes variants, one dark and one light)
  (if (display-graphic-p)
      (setq dotspacemacs-themes '(solarized-light
                                  zenburn))
    (setq dotspacemacs-themes '(zenburn
                                solarized-light))
      )
  )

(defun dotspacemacs/user-config ()
  "Configuration function.
 This function is called at the very end of Spacemacs initialization after
layers configuration."
  (setq-default indent-tabs-mode nil
                tab-width 4)

  (setq vc-follow-symlinks t)
  ;; Custom keybindings
  (evil-leader/set-key "py" 'helm-etags-select)
  (evil-leader/set-key "rf" 'frameset-to-register)
  (evil-leader/set-key "rj" 'jump-to-register)
  (evil-leader/set-key "is" 'ry/insert-yas)
  (evil-leader/set-key "x=" 'align)
  (evil-leader/set-key "ps" 'ry/rsync-project-to-remote)
  (evil-leader/set-key "cs" 'ry/helm-code-snippets)
  (evil-leader/set-key "oc" 'org-capture)

  ;; normal mode
  (define-key evil-normal-state-map "j" 'evil-next-visual-line)
  (define-key evil-normal-state-map "k" 'evil-previous-visual-line)
  (define-key evil-normal-state-map (kbd "C-j") (kbd "5j"))
  (define-key evil-normal-state-map (kbd "C-k") (kbd "5k"))

  ;; insert mode
  (define-key evil-insert-state-map (kbd "C-v") 'evil-paste-after)
  (define-key evil-insert-state-map (kbd "DEL") 'ry/backspace-whitespace-to-tab-stop)
  (define-key evil-insert-state-map (kbd "<s-left>") 'spacemacs/smart-move-beginning-of-line)
  (define-key evil-insert-state-map (kbd "<s-right>") 'end-of-line)
  (define-key evil-insert-state-map (kbd "C-a") 'spacemacs/smart-move-beginning-of-line)
  (define-key evil-insert-state-map (kbd "C-e") 'end-of-line)

  ;; evilified mode
  ;; Example:
  ;; (define-key evil-evilified-state-map "gg" 'evil-goto-first-line)

  ;; org mode
  (setq org-startup-truncated nil)
  (evil-leader/set-key "oa" 'org-agenda)
  (evil-leader/set-key-for-mode 'org-mode "mid" 'ry/insert-today-date)
  (evil-leader/set-key-for-mode 'org-mode "m>" 'org-demote-subtree)
  (evil-leader/set-key-for-mode 'org-mode "m<" 'org-promote-subtree)
  (evil-leader/set-key-for-mode 'org-mode "my" 'ry/org-copy-to-clipboard)
  (evil-leader/set-key-for-mode 'org-mode "mS" 'org-sort)
  (evil-leader/set-key-for-mode 'org-mode "ml" 'org-open-at-point)
  (add-hook 'org-mode-hook (lambda () (toggle-word-wrap 1)))
  (setq org-todo-keywords
        '((sequence "NEXT(n)" "SOON(s)" "SOMEDAY(o)" "WAITING(w)" "DELEGATE(e)"
                    "|" "DONE(d)" "CANCELLED(c)")))

  (setq org-capture-templates
        '(("c" "Code snippet" entry (file+headline "~/baidu/org/code-snippets.org" "Others")
           "** %^{desc}\n#+BEGIN_SRC %^{language|python|emacs-lisp}\n%?\n#+END_SRC")
          ("t" "Task" entry (file+headline "~/baidu/org/tasks.org" "Work")
           "** %^{priority|NEXT|SOON|SOMEDAY} %?\n" :prepend t)
          ("e" "Learn Emacs" entry (file+headline "~/baidu/org/tasks.org" "Learn Emacs")
           "*** %^{priority|NEXT|SOON|SOMEDAY} %?\n" :prepend t)
          ("j" "Journal" entry (file+datetree "~/baidu/org/journal.org")
           "* %?\n")
          ))

  ;; Artist mode
  (with-eval-after-load "artist"
    (define-key artist-mode-map [(down-mouse-3)] 'artist-mouse-choose-operation)
  )

  ;; shell keybindings
  (with-eval-after-load "comint"
    (define-key comint-mode-map (kbd "C-u") 'backward-kill-sentence)
  )

  ;; helm settings
  (setq helm-M-x-fuzzy-match t
        helm-recentf-fuzzy-match t)
  (with-eval-after-load "helm"
    (define-key helm-map (kbd "C-w") 'backward-kill-word)
  )

  ;; magit settings
  (evil-leader/set-key "gr" 'magit-reflog)

  ;; projectile settings
  (setq enable-local-variables :all)
  (add-hook 'emacs-lisp-mode-hook 'ry/auto-reload-dir-locals-hook)

  ;; python settings
  (setq-default python-indent 4)
  (with-eval-after-load "python"
    (modify-syntax-entry ?_ "w" python-mode-syntax-table)
    )
  (remove-hook 'python-mode-hook 'turn-on-evil-matchit-mode)

  (with-eval-after-load "anaconda-mode"
    (define-key anaconda-mode-map [remap find-tag] nil))

  ;; markdown
  (setq markdown-open-command "~/utils/mark.sh")

  ;; termnial settings
  (if (display-graphic-p)
      (ry/gui-config)
    (ry/terminal-config)
    )

  ;; load local config
  (load "~/.emacs-local.el")
)

(defun ry/gui-config()
  (setq interprogram-cut-function nil)
  (setq interprogram-paste-function nil)
  (global-set-key (kbd "s-v") 'ry/osx-paste)
  (global-set-key (kbd "s-c") 'ry/osx-copy)
  (setq frame-title-format '(buffer-file-name "%f" ("%b"))))

(defun ry/terminal-config()
  (setq linum-format "%4d \u2502 "
        linum-relative-format "%3s \u2502 "))

(load "~/toolbox/emacs/funcs.el")
;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.

