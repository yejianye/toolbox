;; -*- mode: dotspacemacs -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration."
  (setq-default
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (ie. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(ruby
     sql
     clojure
     windows-scripts
     (auto-completion :variables
                      auto-completion-enable-snippets-in-popup nil
                      auto-completion-private-snippets-directory "~/toolbox/emacs/snippets")
     markdown
     python
     emacs-lisp
     javascript
     java
     html
     ansible
     yaml
     org
     (syntax-checking :variables
                      syntax-checking-enable-by-default nil)
     (spell-checking :variables
                     spell-checking-enable-by-default nil)
     git
     better-defaults
     restclient
     imenu-list
     treemacs
     sql
     ;; react
     itome-react
     )
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '()
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'
   dotspacemacs-delete-orphan-packages t
   dotspacemacs-additional-packages
   '(
     jade-mode
     vue-mode
     sr-speedbar
     org-cliplink
     writeroom-mode
     cnfonts
     yafolding
     outshine
    )))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; Either `vim' or `emacs'. Evil is always enabled but if the variable
   ;; is `emacs' then the `holy-mode' is enabled at startup.
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progess in `*Messages*' buffer.
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to a .PNG file.
   ;; If the value is nil then no banner is displayed.
   ;; dotspacemacs-startup-banner 'official
   dotspacemacs-startup-banner nil
   ;; t if you always want to see the changelog at startup
   dotspacemacs-always-show-changelog nil
   ;; List of items to show in the startup buffer. If nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects'."
   dotspacemacs-startup-lists '(recents projects)
   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 13
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it.
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ":"
   ;; If non nil the paste micro-state is enabled. While enabled pressing `p`
   ;; several times cycle between the kill ring content.
   dotspacemacs-enable-paste-micro-state nil
   ;; Guide-key delay in seconds. The Guide-key is the popup buffer listing
   ;; the commands bound to the current keystrokes.
   dotspacemacs-guide-key-delay 0.4
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil ;; to boost the loading time.
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up.
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX."
   dotspacemacs-fullscreen-use-non-native 1
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup t
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-inactive-transparency 90
   ;; If non nil unicode symbols are displayed in the mode line.
   dotspacemacs-mode-line-unicode-symbols t
   dotspacemacs-mode-line-theme 'spacemacs
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen.
   dotspacemacs-smooth-scrolling t
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   dotspacemacs-smartparens-strict-mode nil
   ;; If non nil advises quit functions to keep server open when quitting.
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now.
   dotspacemacs-default-package-repository nil
   dotspacemacs-distinguish-gui-tab t
   dotspacemacs-large-file-size 100
   dotspacemacs-auto-resume-layouts nil
   )
  ;; User initialization goes here
  ;; List of themes, the first of the list is loaded when spacemacs starts.
  ;; Press <SPC> T n to cycle to the next theme in the list (works great
  ;; with 2 themes variants, one dark and one light)
  (if (display-graphic-p)
      (setq dotspacemacs-themes '(solarized-dark
                                  solarized-light))
    (setq dotspacemacs-themes '(zenburn
                                solarized-dark))
      )
  )

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init', before layer configuration
executes.
 This function is mostly useful for variables that need to be set
before packages are loaded. If you are unsure, you should try in setting them in
`dotspacemacs/user-config' first."

  ;; Set the Emacs customization file path. Must be done here in user-init.
  ;; Load custom file
  (setq custom-file "~/.emacs-custom.el")
  )

(defun dotspacemacs/user-config ()
  "Configuration function.
 This function is called at the very end of Spacemacs initialization after
layers configuration."
  (load "~/toolbox/emacs/funcs.el")
  (ry/global-settings)
  (ry/global-keybindings)
  (ry/org-mode-settings)
  (ry/python-mode-settings)
  (ry/sql-mode-settings)

  ;; Custom filetypes
  ;; (add-to-list 'auto-mode-alist '("\\.js\\'" . react-mode))

  ;; Artist mode
  (with-eval-after-load "artist"
    (define-key artist-mode-map [(down-mouse-3)] 'artist-mouse-choose-operation)
  )

  ;; shell keybindings
  (with-eval-after-load "comint"
    (define-key comint-mode-map (kbd "C-u") 'backward-kill-sentence)
  )

  ;; helm settings
  (setq helm-M-x-fuzzy-match t
        helm-recentf-fuzzy-match t)
  (with-eval-after-load "helm"
    (define-key helm-map (kbd "C-w") 'backward-kill-word)
    (define-key helm-map (kbd "C-,") 'helm-toggle-visible-mark)
  )

  ;; magit settings
  (setq magit-push-always-verify nil)

  ;; projectile settings
  (setq enable-local-variables :all)
  (add-hook 'emacs-lisp-mode-hook 'ry/auto-reload-dir-locals-hook)

  ;; treemacs
  (spacemacs|use-package-add-hook treemacs
    :post-config
    (add-to-list 'treemacs-ignored-file-predicates 'ry/treemacs-ignore-file-predicate)
    )

  ;; python settings
  ;; ediff
  (with-eval-after-load "ediff"
    (ediff-setup-keymap)
    (define-key ediff-mode-map " " nil)
    )

  ;; markdown
  (setq markdown-open-command "~/utils/mark.sh")

  (add-hook 'markdown-mode-hook 'ry/setup-markdown-mode)

  ;; outline mode
  (require 'outshine)
  (add-hook 'outline-minor-mode-hook 'outshine-hook-function)

  ;; writeroom
  (setq writeroom-extra-line-spacing 0.5)
  (setq writeroom-width 100)

  ;; osx settings
  (setq select-enable-clipboard nil)
  (setq mac-command-modifier 'super)
  (setq mac-option-modifier 'meta)
  (global-set-key (kbd "s-v") 'ry/osx-paste)
  (define-key evil-normal-state-map (kbd "s-n") 'new-frame)
  (define-key evil-visual-state-map (kbd "s-c") 'ry/osx-copy)
  (global-set-key (kbd "s-=") 'spacemacs/scale-up-font)
  (global-set-key (kbd "s--") 'spacemacs/scale-down-font)
  ;; (define-key evil-normal-state-map (kbd "s-=") 'cnfonts-increase-fontsize)
  ;; (define-key evil-normal-state-map (kbd "s--") 'cnfonts-decrease-fontsize)

  ;; termnial settings
  (if (display-graphic-p)
      (ry/gui-config)
    (Ry/terminal-config)
    )

  ;; Edebug settings
  (with-eval-after-load "edebug"
    (define-key edebug-mode-map "A" 'ry/elisp-add-to-watch)
    )

  ;; load custom-file if it exists
  (when (file-exists-p custom-file)
    (load-file custom-file))

  ;; Load local config
  (setq local-config-file "~/.emacs-local.el")
  (when (file-exists-p local-config-file)
    (load local-config-file))
)

(defun ry/gui-config()
  (setq interprogram-cut-function nil)
  (setq interprogram-paste-function nil)
  (setq frame-title-format '(buffer-file-name "%f" ("%b"))))

(defun ry/terminal-config()
  (setq linum-format "%4d \u2502 "
        linum-relative-format "%3s \u2502 "))

(defun ry/global-settings ()
  ;; tags
  (setq tags-add-tables nil)
  (setq tags-revert-without-query t)

  ;; Fonts
  (require 'cnfonts)
  (cnfonts-enable)
  (cnfonts-set-spacemacs-fallback-fonts)
  (setq cnfonts-use-face-font-rescale t)
  (setq solarized-scale-org-headlines nil)

  ;; Enable auto-completion globally
  (global-company-mode)

  ;; Auto-saving
  (setq create-lockfiles nil)
  (setq auto-save-visited-file-name t)

  ;; Disable smartparens
  (spacemacs/toggle-smartparens-globally-off)
  (remove-hook 'prog-mode-hook 'smartparens-mode)

  ;; Treat underscore as part of the word
  (ry/add-hook-underscore-as-word '(prog-mode-hook yaml-mode-hook))

  (setq-default indent-tabs-mode nil
                tab-width 4)

  (setq vc-follow-symlinks t)
  )

(defun ry/global-keybindings ()
  (spacemacs/set-leader-keys
    "py" 'helm-etags-select
    "rf" 'frameset-to-register
    "rj" 'jump-to-register
    "x=" 'align
    "ps" 'ry/rsync-project-to-remote
    "cs" 'ry/helm-code-snippets
    "E" 'eval-expression
    "yi" 'yas-insert-snippet
    "yn" 'yas-new-snippet
    "pn" 'ry/projectile-add-new-project
    "fy" 'ry/show-and-copy-buffer-filename
    "gr" 'magit-reflog
    "gd" 'ry/git-diff
    )
  ;; normal mode
  (define-key evil-normal-state-map "j" 'evil-next-visual-line)
  (define-key evil-normal-state-map "k" 'evil-previous-visual-line)
  (define-key evil-normal-state-map ";w" 'subword-forward)
  (define-key evil-normal-state-map ";b" 'subword-backward)
  (define-key evil-normal-state-map (kbd "C-j") (kbd "jjjjj"))
  (define-key evil-normal-state-map (kbd "C-k") (kbd "kkkkk"))

  ;; insert mode
  (define-key evil-insert-state-map (kbd "C-v") 'evil-paste-after)
  (define-key evil-insert-state-map (kbd "DEL") 'ry/backspace-whitespace-to-tab-stop)
  (define-key evil-insert-state-map (kbd "<s-left>") 'beginning-of-line)
  (define-key evil-insert-state-map (kbd "<s-right>") 'end-of-line)
  (define-key evil-insert-state-map (kbd "C-a") 'beginning-of-line)
  (define-key evil-insert-state-map (kbd "C-e") 'end-of-line)
  )

(defun ry/org-mode-settings()
  (setq org-startup-truncated nil)
  (setq org-export-with-sub-superscripts nil)
  (setq ry-org-root-dir "~/Dropbox/org/")
  (setq ry-org-images-dir (concat ry-org-root-dir "images/"))
  (setq ry-org-journal-dir (concat ry-org-root-dir "journals/"))
  (setq ry-org-code-snippet-file (concat ry-org-root-dir "code-snippets.org"))
  (spacemacs/set-leader-keys
    "oc" 'org-capture
    "oa" 'org-agenda
    "oj" 'ry/org-goto-journal
    "oJ" 'ry/helm-org-journal
    "od" 'ry/org-goto-diary
    "on" 'ry/org-new-today-todo
    "Tw" 'writeroom-mode
    "yi" 'ry/insert-yas
    )

  (spacemacs|use-package-add-hook evil-org
    :post-config
    (progn
      (spacemacs/set-leader-keys-for-major-mode 'org-mode
        "id" 'ry/insert-today-date
        "is" 'ry/org-paste-image
        "iL" 'ry/org-insert-chrome-url-osx
        ">" 'org-demote-subtree
        "<" 'org-promote-subtree
        "yy" 'ry/org-copy-as-rtf
        "ym" 'ry/org-copy-as-markdown
        "l" 'org-open-at-point
        "<tab>" 'ry/org-cycle
        )
      (evil-define-key 'normal evil-org-mode-map
        "t" 'org-todo
        )
      )
    )

  (add-hook 'org-mode-hook (lambda ()
                             (toggle-word-wrap 1)
                             (org-indent-mode 1)
                             )
            )

  (setq org-todo-keywords
        '((sequence "WIP(w)" "NEXT(n)" "SOON(s)" "SOMEDAY(o)" "WAITING(W)" "DELEGATE(e)"
                    "|" "DONE(d)" "CANCELLED(c)")))

  (setq org-capture-templates
        '(("c" "Code snippet" entry (file+headline "~/Dropbox/org/code-snippets.org" "Others")
           "** %^{desc}\n#+BEGIN_SRC %^{language|python|emacs-lisp}\n%?\n#+END_SRC")
          ("t" "Task" entry (file+headline "~/Dropbox/org/tasks.org" "Work")
           "** %^{priority|NEXT|SOON|SOMEDAY} %?\n" :prepend t)
          ("e" "Learn Emacs" entry (file+headline "~/Dropbox/org/tasks.org" "Learn Emacs")
           "*** %^{priority|NEXT|SOON|SOMEDAY} %?\n" :prepend t)
          ))
  )

(defun ry/python-mode-settings ()
  (spacemacs|use-package-add-hook python
    :post-config
    (spacemacs/set-leader-keys-for-major-mode 'python-mode
      "'" 'ry/python-start-or-switch-repl))

  (add-hook 'python-mode-hook (lambda ()
                                (yafolding-mode 1)
                                ))
  ;; It should be '-i' to keep ipython in interactive mode
  ;; But ipython would fail to boot with '-i', and currently
  ;; I have no idea why it happens.
  (setq python-shell-interpreter-args "-i --simple-prompt --profile=emacs")
  (setq-default python-indent 4)
  ;; (with-eval-after-load "python"
  ;;   (modify-syntax-entry ?_ "w" python-mode-syntax-table)
  ;;   )
  (remove-hook 'python-mode-hook 'turn-on-evil-matchit-mode)

  ;; (message "bind leader key for python mode in my config")
  ;; (spacemacs/set-leader-keys-for-major-mode 'python-mode
  ;;   "'" 'ry/python-start-or-switch-repl)

  (with-eval-after-load "anaconda-mode"
    (define-key anaconda-mode-map [remap find-tag] nil))
  )

(defun ry/sql-mode-settings ()
  (add-hook 'sql-mode-hook 'ry/sql-mode-hook)
  (spacemacs/set-leader-keys-for-major-mode 'sql-mode
    "c" 'ry/sql-connect-and-bind
    "lc" 'ry/sql-list-clear-cache
    "bk" 'ry/sql-kill-buffer
    "r" 'ry/sql-reconnect
    "sv" 'ry/sql-show-viz
    "o" 'outline-minor-mode
    )
  (setq sql-set-sqli-hook 'ry/sql-set-sqli-hook)
  )
