;; -*- mode: dotspacemacs -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration."
  (setq-default
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (ie. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(windows-scripts
     (auto-completion :variables
                      auto-completion-enable-snippets-in-popup nil
                      auto-completion-private-snippets-directory "~/toolbox/emacs/snippets")
     markdown
     python
     emacs-lisp
     javascript
     html
     ansible
     yaml
     org
     (syntax-checking :variables
                      syntax-checking-enable-by-default nil)
     (spell-checking :variables
                     spell-checking-enable-by-default nil)
     git
     better-defaults
     restclient
     imenu-list
     treemacs
     react
     )
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '()
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'
   dotspacemacs-delete-orphan-packages t
   dotspacemacs-additional-packages
   '(
     jade-mode
     vue-mode
     sr-speedbar
    )))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; Either `vim' or `emacs'. Evil is always enabled but if the variable
   ;; is `emacs' then the `holy-mode' is enabled at startup.
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progess in `*Messages*' buffer.
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to a .PNG file.
   ;; If the value is nil then no banner is displayed.
   ;; dotspacemacs-startup-banner 'official
   dotspacemacs-startup-banner nil
   ;; t if you always want to see the changelog at startup
   dotspacemacs-always-show-changelog nil
   ;; List of items to show in the startup buffer. If nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects'."
   dotspacemacs-startup-lists '(recents projects)
   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 13
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it.
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ":"
   ;; If non nil the paste micro-state is enabled. While enabled pressing `p`
   ;; several times cycle between the kill ring content.
   dotspacemacs-enable-paste-micro-state nil
   ;; Guide-key delay in seconds. The Guide-key is the popup buffer listing
   ;; the commands bound to the current keystrokes.
   dotspacemacs-guide-key-delay 0.4
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil ;; to boost the loading time.
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up.
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX."
   dotspacemacs-fullscreen-use-non-native 1
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-inactive-transparency 90
   ;; If non nil unicode symbols are displayed in the mode line.
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen.
   dotspacemacs-smooth-scrolling t
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   dotspacemacs-smartparens-strict-mode nil
   ;; If non nil advises quit functions to keep server open when quitting.
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now.
   dotspacemacs-default-package-repository nil
   dotspacemacs-distinguish-gui-tab t
   dotspacemacs-large-file-size 100
   )
  ;; User initialization goes here
  ;; List of themes, the first of the list is loaded when spacemacs starts.
  ;; Press <SPC> T n to cycle to the next theme in the list (works great
  ;; with 2 themes variants, one dark and one light)
  (if (display-graphic-p)
      (setq dotspacemacs-themes '(solarized-dark
                                  solarized-light))
    (setq dotspacemacs-themes '(zenburn
                                solarized-dark))
      )
  )

(defun dotspacemacs/user-config ()
  "Configuration function.
 This function is called at the very end of Spacemacs initialization after
layers configuration."
  (load "~/toolbox/emacs/funcs.el")
  ;; Enable auto-completion globally
  (global-company-mode)

  ;; Auto-saving
  (setq auto-save-visited-file-name t)

  ;; Disable smartparens
  (spacemacs/toggle-smartparens-globally-off)
  (remove-hook 'prog-mode-hook 'smartparens-mode)

  ;; Treat underscore as part of the word
  ;; (add-hook 'prog-mode-hook 'ry/global-underscore-as-word)
  (ry/add-hook-underscore-as-word '(prog-mode-hook yaml-mode-hook))

  (setq-default indent-tabs-mode nil
                tab-width 4)

  (setq vc-follow-symlinks t)

  ;; Custom filetypes
  (add-to-list 'auto-mode-alist '("\\.js\\'" . react-mode))

  ;; Custom keybindings
  (spacemacs/set-leader-keys
    "py" 'helm-etags-select
    "rf" 'frameset-to-register
    "rj" 'jump-to-register
    "x=" 'align
    "ps" 'ry/rsync-project-to-remote
    "cs" 'ry/helm-code-snippets
    "E" 'eval-expression
    "yi" 'yas-insert-snippet
    "yn" 'yas-new-snippet
    "pn" 'ry/projectile-add-new-project
    )
  ;; normal mode
  (define-key evil-normal-state-map "j" 'evil-next-visual-line)
  (define-key evil-normal-state-map "k" 'evil-previous-visual-line)
  (define-key evil-normal-state-map ";w" 'subword-forward)
  (define-key evil-normal-state-map ";b" 'subword-backward)
  (define-key evil-normal-state-map (kbd "C-j") (kbd "jjjjj"))
  (define-key evil-normal-state-map (kbd "C-k") (kbd "kkkkk"))

  ;; insert mode
  (define-key evil-insert-state-map (kbd "C-v") 'evil-paste-after)
  (define-key evil-insert-state-map (kbd "DEL") 'ry/backspace-whitespace-to-tab-stop)
  (define-key evil-insert-state-map (kbd "<s-left>") 'beginning-of-line)
  (define-key evil-insert-state-map (kbd "<s-right>") 'end-of-line)
  (define-key evil-insert-state-map (kbd "C-a") 'beginning-of-line)
  (define-key evil-insert-state-map (kbd "C-e") 'end-of-line)

  ;; evilified mode
  ;; Example:
  ;; (define-key evil-evilified-state-map "gg" 'evil-goto-first-line)

  ;; org mode
  (setq org-startup-truncated nil)
  (setq org-export-with-sub-superscripts nil)
  (setq ry-org-root-dir "~/Dropbox/org/")
  (setq ry-org-images-dir (concat ry-org-root-dir "images/"))
  (setq ry-org-journal-dir (concat ry-org-root-dir "journals/"))
  (setq ry-org-code-snippet-file (concat ry-org-root-dir "code-snippets.org"))
  (spacemacs/set-leader-keys
    "oc" 'org-capture
    "oa" 'org-agenda
    "oj" 'ry/org-goto-journal
    "oJ" 'ry/helm-org-journal
    "od" 'ry/org-goto-diary
    "on" 'ry/org-new-today-todo
    "yi" 'ry/insert-yas
    )
  (spacemacs|use-package-add-hook evil-org
    :post-config
    (progn
      (message "My custom evil-org-mode mapping")
      (spacemacs/set-leader-keys-for-major-mode 'org-mode
        "id" 'ry/insert-today-date
        "is" 'ry/org-paste-image
        ">" 'org-demote-subtree
        "<" 'org-promote-subtree
        "y" 'ry/org-copy-to-clipboard
        "l" 'org-open-at-point
        "T" 'ry/org-filter-todo-keyword
        )
      (evil-define-key 'normal evil-org-mode-map
        "t" 'org-todo
        (kbd "<tab>") 'ry/org-cycle)
      )
    )

  (add-hook 'org-mode-hook (lambda ()
                             (toggle-word-wrap 1)
                             (org-indent-mode 1)))

  (setq org-todo-keywords
        '((sequence "WIP(w)" "NEXT(n)" "SOON(s)" "SOMEDAY(o)" "WAITING(W)" "DELEGATE(e)"
                    "|" "DONE(d)" "CANCELLED(c)")))

  (setq org-capture-templates
        '(("c" "Code snippet" entry (file+headline "~/Dropbox/org/code-snippets.org" "Others")
           "** %^{desc}\n#+BEGIN_SRC %^{language|python|emacs-lisp}\n%?\n#+END_SRC")
          ("t" "Task" entry (file+headline "~/Dropbox/org/tasks.org" "Work")
           "** %^{priority|NEXT|SOON|SOMEDAY} %?\n" :prepend t)
          ("e" "Learn Emacs" entry (file+headline "~/Dropbox/org/tasks.org" "Learn Emacs")
           "*** %^{priority|NEXT|SOON|SOMEDAY} %?\n" :prepend t)
          ))

  ;; Artist mode
  (with-eval-after-load "artist"
    (define-key artist-mode-map [(down-mouse-3)] 'artist-mouse-choose-operation)
  )

  ;; shell keybindings
  (with-eval-after-load "comint"
    (define-key comint-mode-map (kbd "C-u") 'backward-kill-sentence)
  )

  ;; helm settings
  (setq helm-M-x-fuzzy-match t
        helm-recentf-fuzzy-match t)
  (with-eval-after-load "helm"
    (define-key helm-map (kbd "C-w") 'backward-kill-word)
    (define-key helm-map (kbd "C-,") 'helm-toggle-visible-mark)
  )

  ;; magit settings
  (setq magit-push-always-verify nil)
  (evil-leader/set-key "gr" 'magit-reflog)

  ;; projectile settings
  (setq enable-local-variables :all)
  (add-hook 'emacs-lisp-mode-hook 'ry/auto-reload-dir-locals-hook)

  ;; treemacs
  (spacemacs|use-package-add-hook treemacs
    :post-config
    (add-to-list 'treemacs-ignored-file-predicates 'ry/treemacs-ignore-file-predicate)
    )

  ;; python settings
  (spacemacs|use-package-add-hook python
    :post-config
    (spacemacs/set-leader-keys-for-major-mode 'python-mode
      "'" 'ry/python-start-or-switch-repl))

  ;; It should be '-i' to keep ipython in interactive mode
  ;; But ipython would fail to boot with '-i', and currently
  ;; I have no idea why it happens.
  (setq python-shell-interpreter-args "-i --simple-prompt --profile=emacs")
  (setq-default python-indent 4)
  ;; (with-eval-after-load "python"
  ;;   (modify-syntax-entry ?_ "w" python-mode-syntax-table)
  ;;   )
  (remove-hook 'python-mode-hook 'turn-on-evil-matchit-mode)

  ;; (message "bind leader key for python mode in my config")
  ;; (spacemacs/set-leader-keys-for-major-mode 'python-mode
  ;;   "'" 'ry/python-start-or-switch-repl)

  (with-eval-after-load "anaconda-mode"
    (define-key anaconda-mode-map [remap find-tag] nil))

  ;; ediff
  (with-eval-after-load "ediff"
    (ediff-setup-keymap)
    (define-key ediff-mode-map " " nil)
    )

  ;; markdown
  (setq markdown-open-command "~/utils/mark.sh")

  (add-hook 'markdown-mode-hook 'ry/markdown-orgtbl-mode)

  ;; tags
  ;; Never keep tag tables across projects
  (setq tags-add-tables nil)

  ;; osx settings
  (setq mac-command-modifier 'super)
  (setq mac-option-modifier 'meta)
  (global-set-key (kbd "s-v") 'ry/osx-paste)
  (define-key evil-visual-state-map (kbd "s-c") 'ry/osx-copy)
  (define-key evil-normal-state-map (kbd "s-=") 'spacemacs/scale-up-font)
  (define-key evil-normal-state-map (kbd "s--") 'spacemacs/scale-down-font)

  ;; termnial settings
  (if (display-graphic-p)
      (ry/gui-config)
    (Ry/terminal-config)
    )

  ;; load local config
  (load "~/.emacs-local.el")
)

(defun ry/gui-config()
  (setq interprogram-cut-function nil)
  (setq interprogram-paste-function nil)
  (setq frame-title-format '(buffer-file-name "%f" ("%b"))))

(defun ry/terminal-config()
  (setq linum-format "%4d \u2502 "
        linum-relative-format "%3s \u2502 "))

(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (powershell helm-gtags ggtags yapfify yaml-mode ws-butler winum which-key web-mode web-beautify vue-mode volatile-highlights vi-tilde-fringe uuidgen use-package unfill treemacs-projectile treemacs-evil toc-org tagedit symon string-inflection sr-speedbar spaceline solarized-theme smeargle slim-mode scss-mode sass-mode restclient-helm restart-emacs rainbow-delimiters pyvenv pytest pyenv-mode py-isort pug-mode popwin pip-requirements persp-mode pcre2el password-generator paradox orgit org-projectile org-present org-pomodoro org-download org-bullets org-brain open-junk-file ob-restclient ob-http mwim move-text markdown-toc magit-gitflow macrostep lorem-ipsum livid-mode live-py-mode linum-relative link-hint less-css-mode json-mode js2-refactor js-doc jinja2-mode jade-mode info+ indent-guide impatient-mode hy-mode hungry-delete hl-todo highlight-parentheses highlight-numbers highlight-indentation hide-comnt help-fns+ helm-themes helm-swoop helm-pydoc helm-purpose helm-projectile helm-mode-manager helm-make helm-gitignore helm-flx helm-descbinds helm-css-scss helm-company helm-c-yasnippet helm-ag google-translate golden-ratio gnuplot gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link gh-md fuzzy flyspell-correct-helm flycheck-pos-tip flx-ido fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist evil-org evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-magit evil-lisp-state evil-lion evil-indent-plus evil-iedit-state evil-exchange evil-escape evil-ediff evil-args evil-anzu eval-sexp-fu emmet-mode elisp-slime-nav editorconfig dumb-jump define-word cython-mode company-web company-tern company-statistics company-restclient company-ansible company-anaconda column-enforce-mode coffee-mode clean-aindent-mode auto-yasnippet auto-highlight-symbol auto-dictionary auto-compile ansible-doc ansible aggressive-indent adaptive-wrap ace-link ace-jump-helm-line ac-ispell))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
)
